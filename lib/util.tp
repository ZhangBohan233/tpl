struct LinkedNode {
    var value: *void;
    var next: *LinkedNode;
}

struct LinkedList {
    var size: int;
    var head: *LinkedNode;
    var init: fn;
    var append: fn;
    var get: fn;
    var pop: fn;
    var print: fn;
}

fn LinkedList::init() void {
    this..size = 0;
}

fn LinkedList::append(value: *void) void {
    var node: *LinkedNode = malloc(sizeof(LinkedNode));
    node..value = value;
    node..next = this..head;
    this..head = node;
    this..size = this..size + 1;
}

fn LinkedList::get(index: int) *void {
    var node: *LinkedNode = this..head;
    for i := 0; i < index; ++i {
        node = node..next;
    }
    return node..value;
}

fn LinkedList::pop() *void {
    node := this..head;
    this..head = node..next;
    this..size = this..size - 1;
    return node..value;
}

fn LinkedList::print(p_func: fn(*void)->void) void {
    printf("[");
    for node := this..head; node != NULL; node = node..next {
        printf("%d, ", node..value);
    }
    printf("]\n");
}
