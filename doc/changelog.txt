#### Build 1031 ####
2020/01/06

* Bug fixes:
    * Compiler mistakenly compile indexing of any array type as int array
    * Wrong malloc size of command line args in C vm
* New library functions:
    * str_to_int in "string"


#### Build 1030 ####
2020/01/06

* Access to command line arguments:
    * fn main(argc: int, argv: **char) int {...}


#### Build 1029 ####
2020/01/05

* High dimensional getitem and setitem
* Changed the ast precedence of unary expr
* Deleted some unused codes


#### Build 1028 ####
2020/01/04

* New syntax:
    * "register x: int" which stores variable in a register


#### Build 1027 ####
2020/01/04

* Native function implemented:
    * malloc, free, mem_copy


#### Build 1026 ####
2020/01/04

* Bug fixes:
    * Fixed that loops have incorrect goto offset, caused by the length change of LOAD instruction
    * Fixed that duplicate string literal pointers are counted multiple times


#### Build 1025 ####
2020/01/03

* Finished casts and floats
* Bug fixes:
    * Fixed that pointers comparison returns pointer


#### Build 1024 ####
2020/01/03

* Changed the mechanism of array literal:
    * The array stores the self pointer at first
* Changed the function call argument passing mechanism:
    * Reference types are passed by references
* Finished register-wised pointers operations
* Currently unavailable:
    * Casts
    * Floats
    * Functions mem_copy, malloc, free


#### Build 1023 ####
2020/01/03

* Changed the compilation sequence of assignment

#### Build 1022 ####
2020/01/03

* Redesigned VM:
    * Compiler now allocate registers usage
* Currently unavailable:
    * Pointers
    * Casts
    * Floats
    * Functions mem_copy, malloc, free

#### Build 1021 ####
2020/01/02

* Added support of int++ and --
* Added support of negation '-'
* Bug fixes:
    * Fixed some bugs in TPA generator
    * Fixed bug of quick assignment
* Abstract Syntax Tree based optimizer:
    * Constants pre-calculation
* Added more functions in 'math.tp'
* Known bug:
    * Optimize causes variable shift

#### Build 1020 ####
2020/01/02

* Type casting functions 'int' and 'float'
* TPA now use '$' to note pointers, '@' to note
* Fixed that compile time optimizing causes unexpected result while casting between int and float

#### Build 1019 ####
2020/01/01

* VM optimization:
    * Better int performance
* Int byteorder change:
    * Follow the system default

#### Build 1018 ####
2020/01/01

* Aligned all instructions with length 8x + 1 bytes
* Added support of all float operations
* Enabled compile time optimizer

#### Build 1017 ####
2019/12/31

* Bug fixes:
    * Operators "&&", "||", "<=", ">=" push wrong stack pointer value

#### Build 1016 ####
2019/12/31

* Added Trash Program Assembly(TPA) parser:
    * Parsing and compiling .tpa to .tpc
* Added TPA code optimizer

#### Build 1015 ####
2019/12/30

* Added support for function predefine, which provided the support of circular function call
* Changed the function storing method:
    * Intermediate pointers pointed to real function are now stored to support function predefining

#### Build 1014 ####
2019/12/30

* Added quick assignment expression:
    * ':='

#### Build 1013 ####
2019/12/25

* Added support for more operators:
    * '!', '!='
* Finished char and char array implementation

#### Build 1012 ####
2019/12/25

* New syntax for struct attr:
    * struct.attr for struct self
    * struct_ptr..attr for struct pointer

#### Build 1011 ####
2019/12/24

* Modified pointer system:
    * Types with '*' now stores true pointer, which can be passes between functions
* Supports for null statement
* Added compile time functions:
    * sizeof
* Struct
* VM optimization:
    * Uses 'int_fast64_t' instead of 'int64_t'
* Known bugs:
    * Struct attr not working

#### Build 1010 ####
2019/12/24

* Enable level 1 compile time optimize:
    * Merge assignment and binary operation/function call
* Implemented heap memory management:
    * malloc, free

#### Build 1009 ####
2019/12/23

* Added support for operation-assignment operators:
    * '+=', '-=', '*=', '/=', '%='
* VM optimization:
    * Binary operation uses less registers

#### Build 1008 ####
2019/12/23

* Added support for 'break' and 'continue'

#### Build 1007 ####
2019/12/22

* Support of for loop
* Optimized while loop
* Tpa (Trash program assembly) compiler

#### Build 1006 ####
2019/12/21

* VM performance optimization
    * Replaced simple functions by macros
    * Register

#### Build 1005 ####
2019/12/21

* Added binary operators:
    * &&, ||, >=, <=

#### Build 1004 ####
2019/12/21

* Compiler in Python, Virtual machine in C
* Dramatically improved performance
* Re-implemented everything: currently finished:
    * Variable assignment and retrievement
    * Basic arithmetic of int
    * Function call
    * Types: int, char, boolean
    * If-else statement
    * Simple pointer operation
    * One-dimensional indexing
    * While loop

#### Build 1002 ####

* Memory updates:
    * Re-implemented the available memory pool using a heap. Improved memory fragment management but reduced speed
* Added more memory related built-in functions
* Bug fixes:
    * Fixed that every 'null' occupied 8 bytes

#### Build 1001 ####

* Created TPL: Trash Programming Language
